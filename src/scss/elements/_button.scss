@import '../core/derived-variables';

$button-color: $text-strong !default;
$button-background-color: color(--white) !default;

$button-border-color: $border !default;
$button-border-width: $control-border-width !default;

$button-padding-vertical: calc(0.5em - #{$button-border-width}) !default;
$button-padding-horizontal: 1em !default;

$button-hover-color: $link-hover !default;
$button-hover-border-color: $link-hover-border !default;

$button-focus-color: $link-focus !default;
$button-focus-border-color: $link-focus-border !default;
$button-focus-box-shadow-size: 0 0 0 0.125em !default;
$button-focus-box-shadow-color: rgba($link-parent, 0.25) !default;

$button-active-color: $link-active !default;
$button-active-border-color: $link-active-border !default;

$button-text-color: $text !default;
$button-text-decoration: underline !default;
$button-text-hover-background-color: $background !default;
$button-text-hover-color: $text-strong !default;

$button-ghost-background: none !default;
$button-ghost-border-color: transparent !default;
$button-ghost-color: $link !default;
$button-ghost-decoration: none !default;
$button-ghost-hover-color: $link !default;
$button-ghost-hover-decoration: underline !default;

$button-disabled-background-color: color('white') !default;
$button-disabled-border-color: $border !default;
$button-disabled-shadow: none !default;
$button-disabled-opacity: 0.5 !default;

$button-static-color: $text-light !default;
$button-static-background-color: color('white-ter') !default;
$button-static-border-color: $border !default;

$button-transition: all 0.3s ease !default;

$button-colors: $colors !default;
$allowed-colors: ('primary', 'success', 'info', 'warning', 'danger') !default;

@mixin button-small {
  &:not(.rounded) {
    border-radius: $radius-small;
  }

  font-size: $size-small;
}

@mixin button-normal {
  font-size: $size-normal;
}

@mixin button-medium {
  font-size: $size-medium;
}

@mixin button-large {
  font-size: $size-large;
}

.btn {
  @extend %control;
  @extend %unselectable;

  background-color: $button-background-color;
  border-color: $button-border-color;
  border-width: $button-border-width;
  color: $button-color;
  cursor: pointer;
  justify-content: center;
  padding-bottom: $button-padding-vertical;
  padding-left: $button-padding-horizontal;
  padding-right: $button-padding-horizontal;
  padding-top: $button-padding-vertical;
  text-align: center;
  white-space: nowrap;
  transition: $button-transition;

  strong {
    color: inherit;
  }

  .icon {
    &, &.small, &.medium, &.large {
      height: 1.5em;
      width: 1.5em;
    }

    &:first-child:not(:nth-child(2)) {
      @include ltr-property("margin", calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width}), false);
      @include ltr-property("margin", $button-padding-horizontal / 4);
    }

    &:nth-child(2):not(:first-child) {
      @include ltr-property("margin", $button-padding-horizontal / 4, false);
      @include ltr-property("margin", calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width}));
    }

    &:first-child:nth-child(2) {
      margin-left: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width});
      margin-right: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width});
    }
  }

  &.icon-only {
    .icon {
      margin-left: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width})!important;
      margin-right: calc(#{-1 / 2 * $button-padding-horizontal} - #{$button-border-width})!important;
    }
  }

  &:hover {
    border-color: $button-hover-border-color;
    color: $button-hover-color;
  }

  &:focus {
    border-color: $button-focus-border-color;
    color: $button-focus-color;

    &:not(:active) {
      box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color;
    }
  }

  &:active {
    border-color: $button-active-border-color;
    color: $button-active-color;
  }

  &.text {
    background-color: transparent;
    border-color: transparent;
    color: $button-text-color;
    text-decoration: $button-text-decoration;

    &:hover, &:focus {
      background-color: $button-text-hover-background-color;
      color: $button-text-hover-color;
    }

    &:active {
      background-color: color('white');
      color: $button-text-hover-color;
    }

    &[disabled], fieldset[disabled] & {
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;
    }
  }

  &.ghost {
    background: $button-ghost-background;
    border-color: $button-ghost-border-color;
    color: $button-ghost-color;
    text-decoration: $button-ghost-decoration;

    &:hover {
      color: $button-ghost-hover-color;
      text-decoration: $button-ghost-hover-decoration;
    }
  }

  @each $name, $value in $button-colors {
    @if keyInList($allowed-colors, $name) {
      $color: nth($value, 1);
      $color-invert: nth($value, 2);
  
      &.#{$name} {
        background-color: color($name);
        border-color: transparent;
        color: color('#{$name}-invert');

        &:hover {
          background-color: color('#{$name}-dark');
          border-color: transparent;
          color: color('#{$name}-invert');
        }

        &:focus {
          border-color: transparent;
          color: color('#{$name}-invert');

          &:not(:active) {
            box-shadow: $button-focus-box-shadow-size color($name);
          }
        }
    
        &:active {
          background-color: color('#{$name}-dark');
          border-color: transparent;
          color: color('#{$name}-invert');
        }
    
        &[disabled], fieldset[disabled] & {
          background-color: color($name);
          border-color: transparent;
          box-shadow: none;
        }
    
        &.invert {
          background-color: color('#{$name}-invert');
          color: color($name);

          &:hover {
            background-color: color($name);
            color: color('#{$name}-invert');
          }

          &[disabled], fieldset[disabled] & {
            background-color: color('#{$name}-invert');
            border-color: transparent;
            box-shadow: none;
            color: color($name);
          }
        }
    
        &.loading {
          &::after {
            border-color: transparent transparent color('#{$name}-invert') color('#{$name}-invert') !important;
          }
        }
    
        &.outline {
          background-color: transparent;
          border-color: color($name);
          color: color($name);

          &:hover, &:focus {
            background-color: color($name);
            border-color: color($name);
            color: color('#{$name}-invert');
          }

          &.loading {
            &::after {
              border-color: transparent transparent color($name) color($name) !important;
            }

            &:hover, &:focus {
              &::after {
                border-color: transparent transparent color('#{$name}-invert') color('#{$name}-invert') !important;
              }
            }
          }

          &[disabled], fieldset[disabled] & {
            background-color: transparent;
            border-color: color($name);
            box-shadow: none;
            color: color($name);
          }
        }
    
        &.invert.outline {
          background-color: transparent;
          border-color: color('#{$name}-invert');
          color: color('#{$name}-invert');

          &:hover, &:focus {
            background-color: color('#{$name}-invert');
            color: color($name);
          }

          &.loading {
            &:hover, &:focus {
              &::after {
                border-color: transparent transparent color($name) color($name) !important;
              }
            }
          }

          &[disabled], fieldset[disabled] & {
            background-color: transparent;
            border-color: color('#{$name}-invert');
            box-shadow: none;
            color: color('#{$name}-invert');
          }
        }

        @if length($value) >= 4 {
          &.light {
            background-color: color('#{$name}-light');
            color: color('#{$name}-dark');

            &:hover {
              background-color: color('#{$name}-light');
              border-color: transparent;
              color: color('#{$name}-dark');
            }

            &:active {
              background-color: color('#{$name}-light');
              border-color: transparent;
              color: color('#{$name}-dark');
            }
          }
        }
      }
    }
  }

  &.small {
    @include button-small;
  }

  &.normal {
    @include button-normal;
  }

  &.medium {
    @include button-medium;
  }

  &.large {
    @include button-large;
  }

  &[disabled], fieldset[disabled] & {
    background-color: $button-disabled-background-color;
    border-color: $button-disabled-border-color;
    box-shadow: $button-disabled-shadow;
    opacity: $button-disabled-opacity;
  }

  &.fullwidth {
    display: flex;
    width: 100%;
  }

  &.loading {
    color: transparent !important;
    pointer-events: none;

    &::after {
      @extend %loader;
      @include center(1em);

      position: absolute !important;
    }
  }

  &.rounded {
    border-radius: $radius-rounded;
    padding-left: calc(#{$button-padding-horizontal} + 0.25em);
    padding-right: calc(#{$button-padding-horizontal} + 0.25em);
  }

  &.static {
    background-color: $button-static-background-color;
    border-color: $button-static-border-color;
    color: $button-static-color;
    box-shadow: none;
    pointer-events: none;
  }
}

.btn-group {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;

  .btn {
    margin-bottom: 0.5rem;
    &:not(:last-child):not(.fullwidth) {
      @include ltr-property("margin", 0.5rem);
    }
  }

  &:last-child {
    margin-bottom: -0.5rem;
  }

  &:not(:last-child) {
    margin-bottom: 1rem;
  }

  &.small {
    .button:not(.normal):not(.medium):not(.large) {
      @include button-small;
    }
  }

  &.medium {
    .button:not(.small):not(.normal):not(.large) {
      @include button-medium;
    }
  }

  &.large {
    .button:not(.small):not(.normal):not(.medium) {
      @include button-large;
    }
  }

  &.addons {
    .btn {
      &:not(:first-child) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &:not(:last-child) {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
        @include ltr-property("margin", -1px);
      }

      &:last-child {
        @include ltr-property("margin", 0);
      }

      &:hover {
        z-index: 2;
      }

      &:focus, &:active, &.selected {
        z-index: 3;
        &:hover {
          z-index: 4;
        }
      }

      &.expanded {
        flex-grow: 1;
        flex-shrink: 1;
      }
    }
  }

  &.centered {
    justify-content: center;

    &:not(.addons) {
      .button:not(.fullwidth) {
        margin-left: 0.25rem;
        margin-right: 0.25rem;
      }
    }
  }

  &.right {
    justify-content: flex-end;

    &:not(.addons) {
      .button:not(.fullwidth) {
        margin-left: 0.25rem;
        margin-right: 0.25rem;
      }
    }
  }
}
